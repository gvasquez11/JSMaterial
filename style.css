/*
Basic format is 

selector{
    property1: value
    property2: value
}

Selector can be Element, Class, Id

An Element can be: h1, div, header, footer, span, strong, a , btn
In order to use a class we need a period before the name i.e.
Perios mean that whatever follow is a class name and NOT an html element name

.class-name {
    propertyL value;
}

and id is suppose to be unique so each element can only have one id 
in order to style and id you use the # sign 




*/

h1{
    color: greenyellow;
}

.btn{
padding: 10px;
color:white;
}

.btn-1{
    background-color: green;
}

.btn-2{
    background-color: dodgerblue;
}

.btn-3{
    background-color: fuchsia;
}

div p {
    font-weight: bold;
    color: indigo;
}


/*
For flex 
use display

align-items by deafult is 'strech' 
this fills up the space of the flex-container 

justify-content has space-evenly, space-around, space-between

*/

.flexbox-container{
    display: flex;
    background-color: yellow;
    max-width: 900px;
    justify-content: space-around;
    align-items: center;
    align-content: center;
    
}

.flexbox-item{
    width: 200px;
    margin: 10px;
    background-color: pink;
    border: 5px solid black;
    /*flex-shrink: 0;*/
    
}

.flexbox-item-1{
    min-height: 100px;
}

.flexbox-item-2{
   min-height: 200px;
}

.flexbox-item-3{
    min-height: 50px;
}

/*
Flex box lays out information in 1D
Grid is 2D
fr - fraction of your container space
minmax - will streach if more space is required 
*/

.grid-container{
background-color: teal;
display: grid;
/*template tells us how many columns we'll have*/
grid-template-columns: repeat(4,4fr);
grid-auto-rows: minmax(150px,auto);
grid-gap: 20px;

}

.grid-item{
    border: solid black;
    margin: 10px
}

.grid-item-1{
    grid-column: 1 / 4;
    /*We can also use span for this*/
}

.grid-item-2{
    grid-column: span 4;
}


